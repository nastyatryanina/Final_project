import telebot, logging, schedule, random, time
from datetime import datetime
from threading import Thread
from speechkit import text_to_speech, speech_to_text
from gpt import ask_gpt
from config import LOGS, REMIND_TIME
from creds import get_bot_token
import database as db
import validators


logging.basicConfig(filename=LOGS,
                    level=logging.ERROR,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s",
                    filemode="w")

TOKEN = get_bot_token()
bot = telebot.TeleBot(TOKEN)

db.create_db()
db.create_database()

start_message = ("–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.\n"
                 "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –ø—Ä–æ—Å—Ç–æ –≤ —á–∞—Ç(–Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ).\n" 
                 "–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /help (–ª—É—á—à–µ —Å–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä–µ–∂–¥–µ, —á–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º)")

functions = {
    '/set_time_zone': "–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ú–æ—Å–∫–≤–æ–π",
    '/tts': "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∂–∏–º–∞ TextToSpeech", 
    '/stt': "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∂–∏–º–∞ SpeechToText",
}

remind_messages = [
    ("–¢–µ–±—è —É–∂–µ –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–Ω–æ ü•∫..."
    "–ú–æ–∂–µ—à—å –µ—â–µ –ø–æ—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ç—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—åüåÜ "), 
    ("–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—à–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º! "
     "–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞."),
    ("–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! "
    "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è."), 
    ("–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å —É–º–æ–º! –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∞—à–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º."), 
    ("–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º–∏—Ä —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π"), 
    ("–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞"), 
    ("–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! "
     "–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º."), 
    ("–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞."), 
    ("–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! "
     "–û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –æ—Å–æ–±–µ–Ω–Ω—ã–º."),
    ("–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞."), 
    ("–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –û–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º.")
]

def create_keyboard(buttons_list):
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id

    logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {user_id}")

    status, error_message = validators.is_users_limit(user_id) #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not status:
        bot.send_message(user_id, error_message)
        return

    bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!" + start_message,
                         reply_markup=create_keyboard(['/help']))

    db.insert_row("limits", (user_id, 0, 0, 0))


@bot.message_handler(commands=['set_time_zone'])
def set_time_zone(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç -12 –¥–æ 12.")
    bot.register_next_step_handler(message, get_time_zone)


def get_time_zone(message):
    hour = message.text
    try:
        hour = int(hour)       
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç -12 –¥–æ 12.")
        bot.register_next_step_handler(message, get_time_zone)
        return

    if not -12 <= hour <= 12 :
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç -12 –¥–æ 12.")
        bot.register_next_step_handler(message, get_time_zone)
        return
    
    db.update_value('limits', message.chat.id, 'time_zone', hour)
    bot.send_message(message.chat.id, "–ú—ã —É—á—Ç–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –≤–∞—Å –Ω–µ –≤–æ–≤—Ä–µ–º—è.", reply_markup=create_keyboard(['/help']))

@bot.message_handler(commands=['help'])
def help(message):
    user_id = message.chat.id
    help_message = ""
    for func in functions.items():
        help_message += f'{func[0]} - {func[1]}\n'
    bot.send_message(user_id, help_message)


@bot.message_handler(commands=['tts'])
def tts_handler(message):
    user_id = message.from_user.id
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —è –µ–≥–æ –æ–∑–≤—É—á–∏–ª!')
    bot.register_next_step_handler(message, tts, None, None)


def tts(message, arg_user_id, arg_text):
    if message != None:
        user_id = message.chat.id
        text = message.text
    else:
        user_id = arg_user_id
        text = arg_text

    try: 
        if message != None and message.content_type != 'text':
            bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            return

        status, error_message = validators.is_tts_symbol_limit(user_id, text)
        if not status:
            bot.send_message(user_id, error_message)
            return
         
        db.increase_value("limits", user_id, "tts_symbols", len(text))
        logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {user_id} –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞ TTS")

        status, content = text_to_speech(text)

        if status:
            bot.send_voice(user_id, content)
        else:
            bot.send_message(user_id, content)
    except Exception as e:
        logging.error(e)  
        bot.send_message(user_id, 
                         "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@bot.message_handler(commands=['stt'])
def stt_handler(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ")
    
    bot.register_next_step_handler(message, stt)


def stt(message, mode="send"):
    try:
        user_id = message.from_user.id

        if not message.voice:
            bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            return False, ""

        status, out = validators.is_stt_block_limit(message, message.voice.duration)
        if not status:
            bot.send_message(user_id, out)
            return False, ""

        file_id = message.voice.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)

        status, text = speech_to_text(file)

        if status:
            db.increase_value("limits", user_id, "stt_blocks", out) #—É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤

        if status and mode == "send":
            bot.send_message(user_id, text, reply_to_message_id=message.id)
        elif not status:
            bot.send_message(user_id, text)
        
        return status, text
    except Exception as e:
        logging.error(e)  
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return False, ""
    
    
@bot.message_handler(content_types=['text'])
def get_gpt_answer(message, arg_user_id=None, arg_text=None, mode="send") -> tuple[bool, str]:
    if message != None:
        user_id = message.from_user.id
        text = message.text
    else:
        user_id = arg_user_id
        text = arg_text

    try:
        status, out = validators.is_gpt_token_limit(user_id, text)

        if not status:
            bot.send_message(user_id, out)
            return False, ""
        
        db.insert_row("messages", (user_id, "user", text, int(time.time())))
        messages = db.select_n_last_messages(user_id) 
        print("here")
        status, answer, tokens_in_answer = ask_gpt(messages)
        if not status:
            bot.send_message(user_id, text)
            return False, ""

        db.increase_value("limits", user_id,  "total_gpt_tokens", tokens_in_answer)
        db.insert_row("messages", (user_id, "assistant", answer, int(time.time())))

        if mode == "send":
            bot.send_message(user_id, answer)
        return True, answer
    
    except Exception as e:
        logging.error(e)
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return False, ""

        

@bot.message_handler(content_types=['voice'])
def handle_voice(message: telebot.types.Message):
    status, text = stt(message, mode="return")
    if not status:
        return
    
    status, answer = get_gpt_answer(None, message.from_user.id, text, mode = "return")

    tts(None, message.from_user.id, answer)


@bot.message_handler(func=lambda: True)
def handler(message):
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É")


def remind():
    all_users = db.get_all_users()
    for user in all_users:
        user_zone = db.get_value('limits', user[0], 'time_zone')
        last_msg = db.get_value('messages', user[0], 'time')

        #–µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = REMIND_TIME –∏ —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –¥–Ω—è
        if last_msg != None and datetime.fromtimestamp(user_zone*3600 + last_msg).hour ==  REMIND_TIME and time.time() - last_msg >= 86400: 
            bot.send_message(user[0], random.choice(remind_messages))
            db.insert_row('messages', (user[0], 'bot', "", int(time.time())))


def schedule_runner(): 
    while True: 
        schedule.run_pending() 
        time.sleep(1)

schedule.every().hour.do(remind)

Thread(target = schedule_runner).start()

bot.polling()